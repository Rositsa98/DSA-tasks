#include <iostream>

using namespace std;

struct Node{
int data;
Node* left;
Node* right;

Node(int data){
    this->data = data;
    left=NULL;
    right =NULL;
}
};

class BST{
public:

    Node* insert(Node* root, int data){
        Node* node = new Node(data);

        if(root==NULL){
            return new Node(data);
        }
        else{
            if(data>=root->data){
                root->right = insert(root->right, data);
            }
            else{
                root->left = insert(root->left, data);
            }
        }
        return root;
    }

    void printInOrder(Node* root){
        if(root!=NULL){
            printInOrder(root->left);
            cout<<root->data<<" ";
            printInOrder(root->right);
        }
    }

    int height(Node* root){
        if(root==NULL){
            return 0;
        }
        if(root!=NULL && root->left==NULL && root->right==NULL){
            return 1;
        }

        else{
            int l = height(root->left)+1;
            int r = height(root->right )+1;

            if(l>=r){
                return l;
            }
            else{
                return r;
            }
        }

    }
    void getLevel(Node* root, int l){

        if(root==NULL){
            return;
        }
        if(l==0){
            cout<<root->data<<endl;
        }

        if(l==1){
            if(root->left!=NULL){
                cout<<root->left->data<<" ";
            }
            if(root->right!=NULL){
                cout<<root->right->data<<" ";
            }
            cout<<endl;
        }
        else if(l>1){
            getLevel(root->left, l-1);
            getLevel(root->right, l-1);
        }

    }

    void levelOrder(Node* root){
        for(int i=0; i<height(root); i++){
            getLevel(root, i);
        }
    }

    Node* minInRightSubTree(Node* root){
        Node* curr = root;

        while(curr->left!=NULL){
            curr = curr->left;
        }

        return curr;
    }

    Node* deleteNode(Node* root, int data){
        if(root==NULL){
            return root;
        }

        else if(data<root->data){
            root->left = deleteNode(root->left, data);
        }
        else if(data>root->data){
            root->right = deleteNode(root->right, data);
        }

        else{

            if(root->left==NULL){
                Node* temp = root->right;
                free(root);
                return temp;
            }
            if(root->right==NULL){
                Node* temp = root->left;
                free(root);
                return temp;
            }

            Node* temp = minInRightSubTree(root->right);
            root->data = temp->data;
            root->right = deleteNode(root->right,temp->data);
        }

        return root;
    }



    Node* deleteNode2(Node* root, int data){
        if(root==NULL){
            return root;
        }
        else if(data<root->data){
            root->left = deleteNode2(root->left, data);
        }
        else if(data>root->data){
            root->right = deleteNode2(root->right, data);
        }

        else {
            if (root->left == NULL) {
                Node *temp = root->right;
                free(root);
                return temp;
            } else if (root->right == NULL) {
                Node *temp = root->left;
                free(root);
                return temp;
            }

            Node *temp = minInRightSubTree(root->right);
            root->data = temp->data;
            root->right = deleteNode(root->right, temp->data);
        }
        return root;
    }

};

/*int main(){

    BST bs;

    Node* root = NULL;

    root = bs.insert(root, 3);
    bs.insert(root,2);
    bs.insert(root,4);

    bs.printInOrder(root);

    cout<<endl<<"Height: "<<bs.height(root)<<endl;

    bs.deleteNode(root, 3);
    bs.levelOrder(root);

    return 0;
}*/
