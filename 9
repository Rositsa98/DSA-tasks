#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <list>
#include <vector>
#include <queue>
using namespace std;

class Graph{
    public:
    int size;
    list<pair<int, int>>* adj;

    Graph(int N){
        size = N;
        adj = new list<pair<int, int>>[N];
    }

    void addEdge(int v, int u, int w){
        adj[v].push_back(make_pair(u, w));
        adj[u].push_back(make_pair(v, w));
    }

    vector<int> diikstra(int src){
        vector<int> dist(size, 1000000);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>pq;

        pq.push(make_pair(0,src));
        dist[src] = 0;

        while(!pq.empty()){
            int u = pq.top().second;
            pq.pop();

            list<pair<int, int>>::iterator it;
            for(it = adj[u].begin(); it!=adj[u].end(); it++){
                int v = it->first;
                int w = it->second;

                if(dist[v]>dist[u]+w){
                    dist[v] = dist[u]+w;
                    pq.push(make_pair(dist[v],v));
                }
            }
        }

        return dist;

    }
};
/*

int main() {
    int N, M;
    cin>>N>>M;
   Graph g(N);

    for(int i=0; i<M; i++){
        int v, u, w;
        cin>>v>>u>>w;

        g.addEdge(v, u, w);
    }
    int src;
    cin>>src;

    vector<int> vec = g.diikstra(src);

    cout<<vec.size();

    return 0;
}*/
